import kotlin.properties.ReadWriteProperty
import kotlin.reflect.KProperty

open class SmartDevice (val name: String, val category: String) {
    
    var deviceStatus = "online"
    	protected set
    
    open val deviceType = "unknown"
 
    open fun turnOn() {
        deviceStatus = "on"
    }
    
    open fun turnOff() {
        deviceStatus = "off"
    }
    
    open fun printDeviceInfo() {
        println("Device name: $name, category: $category, type: $deviceType")
    }
}

class SmartTvDevice(deviceName: String, deviceCategory: String) : 
    SmartDevice(name = deviceName, category = deviceCategory) {
        
    override val deviceType: String = "Smart TV"
        
    private var speakerVolume by RangeRequlator(initialValue = 2, minValue = 0, maxValue = 100)
    private var channelNumber by RangeRequlator(initialValue = 1, minValue = 0, maxValue = 200)
        
      override fun turnOn() {
          super.turnOn()
          println("$name is turned on. Speaker volume is set to $speakerVolume and channel number is " +
                "set to $channelNumber.")
      }
      
      override fun turnOff() {
          super.turnOff()
          println("$name is turned off.")
      }
      
      override fun printDeviceInfo() {
          super.printDeviceInfo()
      }
        
      fun increaseTvVolume() {
          speakerVolume++
          println("Speaker volume increased to $speakerVolume")
      }
      
      fun decreaseTvVolume() {
          speakerVolume--
          println("Speaker volume decreased to $speakerVolume")
      }
      
      fun nextChannel() {
          channelNumber++
          println("Channel number increased to $channelNumber")
      }
      
      fun previousChannel() {
          channelNumber--
          println("Channel number decreased to $channelNumber")
      }
}

class SmartLightDevice(deviceName: String, deviceCategory: String) : 
    SmartDevice(name = deviceName, category = deviceCategory) {
        
         override val deviceType: String = "Smart Light"
         private var brightnessLevel by RangeRequlator(initialValue = 2, minValue = 0, maxValue = 100)

         override fun printDeviceInfo() {
             super.printDeviceInfo()
         }
         
         override fun turnOn() {
             super.turnOn()
             brightnessLevel = 2
             println("$name turned on. The brightness level is $brightnessLevel")
         }
         
         override fun turnOff() {
             super.turnOff()
             brightnessLevel = 0
             println("Smart Light turned off.")
         }
            
         fun increaseLightBrightness() {
             brightnessLevel++
             println("Brightness increase to $brightnessLevel")
         } 
         
         fun decreaseLightBrightness() {
             brightnessLevel--
             println("Brightness decrease to $brightnessLevel")
         }
}

class SmartHome(
    val smartTvDevice: SmartTvDevice,
    val smartLightDevice: SmartLightDevice
) {
    
    var deviceTurnOnCount = 0
   		private set
    
    fun printTvInfo() {
        smartTvDevice.printDeviceInfo()
    }
    
    fun turnOnTv() {
        deviceTurnOnCount++
        smartTvDevice.turnOn()
    }
    
    fun turnOffTv() {
        deviceTurnOnCount--
        smartTvDevice.turnOff()
    }
    
    fun increaseTvVolume() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.increaseTvVolume()
        }
    }
    
    fun decreaseTvVolume() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.decreaseTvVolume()
        }
    }
    
    fun changeTvChannelToNext() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.nextChannel()
        }
    }
    
    fun changeTvChannelToPrevious() {
        if (smartTvDevice.deviceStatus == "on") {
            smartTvDevice.previousChannel()
        }
    }
    
    fun printLightInfo() {
        smartLightDevice.printDeviceInfo()
    }
    
    fun turnOnLight() {
        deviceTurnOnCount++
        smartLightDevice.turnOn()
    }
    
    fun turnOffLight() {
        deviceTurnOnCount--
        smartLightDevice.turnOff()
    }
    
    fun increaseLightBrightness() {
        if (smartLightDevice.deviceStatus == "on") {
            smartLightDevice.increaseLightBrightness()
        }
    }
    
    fun decreaseLightBrightness() {
        if (smartLightDevice.deviceStatus == "on") {
            smartLightDevice.decreaseLightBrightness()
        }
    }
    
    fun turnOffAllDevices() {
        turnOffTv()
        turnOffLight()
    }
}

class RangeRequlator(
	initialValue: Int,
    private val minValue: Int,
    private val maxValue: Int
) : ReadWriteProperty<Any?, Int> {
    
    // Это свойство дейтсвует как резервное поле для переменной
    private var fieldData = initialValue
    
    // Эти методы действуют как функции get() и set() свойств.
    
    // Это KProperty интерфейс, который представляет объявленное свойство и 
    // позволяет получить доступ к метаданным делегированного свойства.  
    
    
    override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
        return fieldData
    }
    
    override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int) {
        if (value in minValue..maxValue) {
            fieldData = value
        }
    }
}
    
fun main() {
    val smartHome = SmartHome(
        SmartTvDevice(deviceName = "Android TV", deviceCategory = "Entertainment"),
        SmartLightDevice(deviceName = "Google light", deviceCategory = "Utility")
    )

    smartHome.printTvInfo()
    smartHome.turnOnTv()
    smartHome.printLightInfo()
    smartHome.turnOnLight()
    println("Total number of devices currently turned on: ${smartHome.deviceTurnOnCount}")
    println()

    smartHome.increaseTvVolume()
    smartHome.changeTvChannelToNext()
    smartHome.increaseLightBrightness()
    println()

    smartHome.turnOffAllDevices()
    println("Total number of devices currently turned on: ${smartHome.deviceTurnOnCount}.")
	smartHome.increaseTvVolume()
}
